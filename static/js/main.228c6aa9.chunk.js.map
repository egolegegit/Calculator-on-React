{"version":3,"sources":["app/utils/providers/calculatorProvider.js","app/utils/constants.js","app/components/display.jsx","app/components/numberButton.jsx","app/components/equalButton.jsx","app/components/functionButton.jsx","app/components/clearButton.jsx","app/components/numPad.jsx","app/App.js","reportWebVitals.js","index.js"],"names":["CalculatorContext","React","createContext","CalculatorProvider","children","useState","number","setNumber","storedNumber","setStoredNumber","functionType","setFunctionType","infoMessage","setInfoMessage","handleSetStoredValue","handleSetInfoMessage","msg","Provider","value","handleSetDisplayValue","num","includes","length","replace","handleCalcFunction","data","execExpression","isNaN","Math","round","parseFloat","handleClearValue","Display","useContext","className","NumberButton","buttonValue","onClick","EqualButton","FunctionButton","operator","ClearButton","NumPad","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.228c6aa9.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { PropTypes } from 'prop-types'\r\nimport { MAX_DIGITS } from '../constants'\r\n\r\nexport const CalculatorContext = React.createContext()\r\n\r\nconst CalculatorProvider = ({ children }) => {\r\n  const [number, setNumber] = useState('0')\r\n  const [storedNumber, setStoredNumber] = useState('')\r\n  const [functionType, setFunctionType] = useState('')\r\n  const [infoMessage, setInfoMessage] = useState('')\r\n\r\n  const handleSetStoredValue = () => {\r\n    setStoredNumber(number)\r\n    setNumber('')\r\n  }\r\n\r\n  const handleSetInfoMessage = (msg) => {\r\n    !msg ? setInfoMessage('') : setInfoMessage(msg)\r\n  }\r\n\r\n  const handleSetDisplayValue = (num) => {\r\n    if ((!number.includes('.') || num !== '.') && number.length < MAX_DIGITS) {\r\n      setNumber(`${(number + num).replace(/^0+/, '')}`)\r\n    } else if (number.includes('.') || num === '.') {\r\n      setNumber('')\r\n      handleSetInfoMessage('Результат не определен')\r\n    }\r\n  }\r\n\r\n  const handleCalcFunction = (data) => {\r\n    handleSetInfoMessage('')\r\n\r\n    if (number) {\r\n      setFunctionType(data)\r\n      handleSetStoredValue()\r\n    }\r\n    if (storedNumber) {\r\n      setFunctionType(data)\r\n    }\r\n  }\r\n\r\n  const handleClearValue = () => {\r\n    setNumber('')\r\n    setStoredNumber('')\r\n    setFunctionType('')\r\n    setInfoMessage('')\r\n  }\r\n\r\n  const execExpression = () => {\r\n    if (isNaN(number) || isNaN(storedNumber)) {\r\n      setNumber('')\r\n      setStoredNumber('')\r\n      setInfoMessage('Результат не определен')\r\n    } else if (number && storedNumber) {\r\n      switch (functionType) {\r\n        case '+':\r\n          setStoredNumber(\r\n            `${\r\n              Math.round(\r\n                `${(parseFloat(storedNumber) + parseFloat(number)) * 100}`\r\n              ) / 100\r\n            }`\r\n          )\r\n          break\r\n        case '-':\r\n          setStoredNumber(\r\n            `${\r\n              Math.round(\r\n                `${(parseFloat(storedNumber) - parseFloat(number)) * 1000}`\r\n              ) / 1000\r\n            }`\r\n          )\r\n          break\r\n        case '/':\r\n          setStoredNumber(\r\n            `${\r\n              Math.round(\r\n                `${(parseFloat(storedNumber) / parseFloat(number)) * 1000}`\r\n              ) / 1000\r\n            }`\r\n          )\r\n          break\r\n        case '*':\r\n          setStoredNumber(\r\n            `${\r\n              Math.round(\r\n                `${parseFloat(storedNumber) * parseFloat(number) * 1000}`\r\n              ) / 1000\r\n            }`\r\n          )\r\n          break\r\n        default:\r\n          break\r\n      }\r\n      setNumber('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <CalculatorContext.Provider\r\n      value={{\r\n        number,\r\n        storedNumber,\r\n        setNumber,\r\n        infoMessage,\r\n        handleSetDisplayValue,\r\n        handleCalcFunction,\r\n        handleSetStoredValue,\r\n        execExpression,\r\n        handleClearValue,\r\n        functionType,\r\n      }}\r\n    >\r\n      {children}\r\n    </CalculatorContext.Provider>\r\n  )\r\n}\r\n\r\nCalculatorProvider.propTypes = {\r\n  children: PropTypes.object,\r\n}\r\n\r\nexport default CalculatorProvider\r\n","export const MAX_DIGITS = 10\r\n","import React, { useContext } from 'react'\nimport { CalculatorContext } from '../utils/providers/calculatorProvider'\n\nconst Display = () => {\n  const { number, storedNumber, infoMessage, functionType } =\n    useContext(CalculatorContext)\n\n  return (\n    <>\n      <div className=\"input\">\n        <span className=\"info-string\">\n          {!storedNumber || infoMessage\n            ? `${infoMessage}`\n            : `${storedNumber} ${functionType} ${number}`}\n        </span>\n        <span>\n          {!number.length && !storedNumber ? '0' : number || storedNumber}\n        </span>\n      </div>\n    </>\n  )\n}\n\nexport default Display\n","import React, { useContext } from 'react'\nimport { CalculatorContext } from '../utils/providers/calculatorProvider'\nimport PropTypes from 'prop-types'\n\nconst NumberButton = ({ buttonValue }) => {\n  const { handleSetDisplayValue } = useContext(CalculatorContext)\n  return (\n    <>\n      <div onClick={() => handleSetDisplayValue(buttonValue)}>\n        {buttonValue}\n      </div>\n    </>\n  )\n}\nNumberButton.propTypes = { buttonValue: PropTypes.string.isRequired }\n\nexport default NumberButton\n","import React, { useContext } from 'react'\nimport { CalculatorContext } from '../utils/providers/calculatorProvider'\n\nconst EqualButton = () => {\n  const { execExpression } = useContext(CalculatorContext)\n  return (\n    <>\n      <div className=\"equal\" onClick={execExpression}>\n        =\n      </div>\n    </>\n  )\n}\n\nexport default EqualButton\n","import React, { useContext } from 'react'\nimport { CalculatorContext } from '../utils/providers/calculatorProvider'\nimport PropTypes from 'prop-types'\n\nconst FunctionButton = ({ operator }) => {\n  const { handleCalcFunction } = useContext(CalculatorContext)\n  return (\n    <>\n      <div onClick={() => handleCalcFunction(operator)}>{operator}</div>\n    </>\n  )\n}\nFunctionButton.propTypes = { operator: PropTypes.string.isRequired }\n\nexport default FunctionButton\n","import React, { useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport { CalculatorContext } from '../utils/providers/calculatorProvider'\n\nconst ClearButton = ({ operator }) => {\n  const { handleClearValue } = useContext(CalculatorContext)\n  return (\n    <>\n      <div onClick={handleClearValue}>{operator}</div>\n    </>\n  )\n}\nClearButton.propTypes = { operator: PropTypes.string }\n\nexport default ClearButton\n","import React from 'react'\r\nimport NumberButton from './numberButton'\r\nimport EqualButton from './equalButton'\r\nimport FunctionButton from './functionButton'\r\nimport ClearButton from './clearButton'\r\n\r\nconst NumPad = () => {\r\n  return (\r\n    <>\r\n      <div className=\"buttons\">\r\n        <FunctionButton operator={'+'} />\r\n        <FunctionButton operator={'-'} />\r\n        <FunctionButton operator={'*'} />\r\n        <FunctionButton operator={'/'} />\r\n        <NumberButton buttonValue={'7'} />\r\n        <NumberButton buttonValue={'8'} />\r\n        <NumberButton buttonValue={'9'} />\r\n        <NumberButton buttonValue={'4'} />\r\n        <NumberButton buttonValue={'5'} />\r\n        <NumberButton buttonValue={'6'} />\r\n        <NumberButton buttonValue={'1'} />\r\n        <NumberButton buttonValue={'2'} />\r\n        <NumberButton buttonValue={'3'} />\r\n        <NumberButton buttonValue={'0'} />\r\n        <NumberButton buttonValue={'.'} />\r\n        <ClearButton operator={'AC'} />\r\n        <EqualButton />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default NumPad\r\n","import React from 'react'\nimport CalculatorProvider from './utils/providers/calculatorProvider'\nimport Display from './components/display'\nimport NumPad from './components/numPad'\n\nfunction App() {\n  return (\n    <CalculatorProvider>\n      <div className=\"calculator\">\n        <Display />\n        <NumPad />\n      </div>\n    </CalculatorProvider>\n  )\n}\n\nexport default App\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './app/index.css'\nimport App from './app/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nreportWebVitals()\n"],"sourceRoot":""}